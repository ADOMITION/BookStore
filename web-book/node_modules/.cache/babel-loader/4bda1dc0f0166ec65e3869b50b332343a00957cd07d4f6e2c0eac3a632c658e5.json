{"ast":null,"code":"export default {\n  props: ['password'],\n  computed: {\n    strengthLevel() {\n      if (!this.password) return 0;\n      let score = 0;\n\n      // 长度评分（最高4分）\n      const length = this.password.length;\n      score += Math.min(Math.floor(length / 3), 4); // 每3字符加1分，最高4分\n\n      // 字符类型评分（最高4分）\n      const hasLower = /[a-z]/.test(this.password);\n      const hasUpper = /[A-Z]/.test(this.password);\n      const hasNumber = /\\d/.test(this.password);\n      const hasSpecial = /[^A-Za-z\\d]/.test(this.password);\n\n      // 统计有效字符类型数量\n      const typeCount = [hasLower, hasUpper, hasNumber, hasSpecial].filter(Boolean).length;\n      score += typeCount * 2; // 每种类型加2分\n\n      // 同时包含大小写和特殊字符\n      if (hasLower && hasUpper && hasSpecial) score += 3;\n\n      // 复杂度扣分项\n      score -= this.calculateDeductions();\n\n      // 将总分映射到0-5级（总分除以3取整（因为我们最高就是按照每三分一个等级floor向下取整)，\n      // 使用 Math.max() 是为了确保结果不会小于 0）\n      // 使用 Math.min() 是为了确保结果不会大于 5\n      return Math.min(Math.max(Math.floor(score / 3), 0), 5); // 0-5级\n    },\n    strengthWidth() {\n      const widths = ['15%', '30%', '50%', '65%', '85%', '100%'];\n      return widths[this.strengthLevel] || '0%';\n    },\n    strengthText() {\n      const texts = ['极弱', '非常弱', '弱', '中等', '强', '非常强'];\n      return texts[this.strengthLevel];\n    }\n  },\n  methods: {\n    calculateDeductions() {\n      let deductions = 0;\n      const pass = this.password;\n\n      // 连续字符扣分（如1234、abcd）\n      // 要检查连续的 4 个字符，所以 i 最大只能到 pass.length - 4，这样才能保证 i + 3 不会超出字符串的长度范围。\n      for (let i = 0; i < pass.length - 3; i++) {\n        const s1 = pass.charCodeAt(i);\n        const s2 = pass.charCodeAt(i + 1);\n        const s3 = pass.charCodeAt(i + 2);\n        const s4 = pass.charCodeAt(i + 3);\n\n        // 检查是否连续递增或递减（数字或字母）\n        if (s2 === s1 + 1 && s3 === s2 + 1 && s4 === s3 + 1 || s2 === s1 - 1 && s3 === s2 - 1 && s4 === s3 - 1) {\n          deductions += 3;\n        }\n      }\n\n      // 重复字符扣分（如aaaa）\n      if (/(.)\\1{3,}/.test(pass)) deductions += 2;\n\n      // 全数字或全字母扣分\n      //+前面的元素至少出现一次\n      if (/^\\d+$/.test(pass) || /^[A-Za-z]+$/.test(pass)) deductions += 2;\n      return Math.min(deductions, 8); // 最多扣8分\n    }\n  }\n};","map":{"version":3,"names":["props","computed","strengthLevel","password","score","length","Math","min","floor","hasLower","test","hasUpper","hasNumber","hasSpecial","typeCount","filter","Boolean","calculateDeductions","max","strengthWidth","widths","strengthText","texts","methods","deductions","pass","i","s1","charCodeAt","s2","s3","s4"],"sources":["src/PasswordStrength.vue"],"sourcesContent":["<template>\r\n  <div class=\"password-strength\">\r\n    <div\r\n        class=\"strength-bar\"\r\n        :class=\"'level-' + strengthLevel\"\r\n        :style=\"{ width: strengthWidth }\"\r\n    ></div>\r\n    <span class=\"strength-text\">{{ strengthText }}</span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: ['password'],\r\n  computed: {\r\n    strengthLevel() {\r\n      if (!this.password) return 0;\r\n\r\n      let score = 0;\r\n\r\n      // 长度评分（最高4分）\r\n      const length = this.password.length;\r\n      score += Math.min(Math.floor(length / 3), 4); // 每3字符加1分，最高4分\r\n\r\n      // 字符类型评分（最高4分）\r\n      const hasLower = /[a-z]/.test(this.password);\r\n      const hasUpper = /[A-Z]/.test(this.password);\r\n      const hasNumber = /\\d/.test(this.password);\r\n      const hasSpecial = /[^A-Za-z\\d]/.test(this.password);\r\n\r\n      // 统计有效字符类型数量\r\n      const typeCount = [hasLower, hasUpper, hasNumber, hasSpecial].filter(Boolean).length;\r\n      score += typeCount * 2; // 每种类型加2分\r\n\r\n      // 同时包含大小写和特殊字符\r\n      if (hasLower && hasUpper && hasSpecial) score += 3;\r\n\r\n      // 复杂度扣分项\r\n      score -= this.calculateDeductions();\r\n\r\n      // 将总分映射到0-5级（总分除以3取整（因为我们最高就是按照每三分一个等级floor向下取整)，\r\n      // 使用 Math.max() 是为了确保结果不会小于 0）\r\n      // 使用 Math.min() 是为了确保结果不会大于 5\r\n      return Math.min(Math.max(Math.floor(score / 3), 0), 5); // 0-5级\r\n    },\r\n    strengthWidth() {\r\n      const widths = ['15%', '30%', '50%', '65%', '85%', '100%'];\r\n      return widths[this.strengthLevel] || '0%';\r\n    },\r\n    strengthText() {\r\n      const texts = ['极弱', '非常弱', '弱', '中等', '强', '非常强'];\r\n      return texts[this.strengthLevel];\r\n    }\r\n  },\r\n  methods: {\r\n    calculateDeductions() {\r\n      let deductions = 0;\r\n      const pass = this.password;\r\n\r\n      // 连续字符扣分（如1234、abcd）\r\n      // 要检查连续的 4 个字符，所以 i 最大只能到 pass.length - 4，这样才能保证 i + 3 不会超出字符串的长度范围。\r\n      for (let i = 0; i < pass.length - 3; i++) {\r\n        const s1 = pass.charCodeAt(i);\r\n        const s2 = pass.charCodeAt(i + 1);\r\n        const s3 = pass.charCodeAt(i + 2);\r\n        const s4 = pass.charCodeAt(i + 3);\r\n\r\n        // 检查是否连续递增或递减（数字或字母）\r\n        if (\r\n            (s2 === s1 + 1 && s3 === s2 + 1 && s4 === s3 + 1) ||\r\n            (s2 === s1 - 1 && s3 === s2 - 1 && s4 === s3 - 1)\r\n        ) {\r\n          deductions += 3;\r\n        }\r\n      }\r\n\r\n      // 重复字符扣分（如aaaa）\r\n      if (/(.)\\1{3,}/.test(pass)) deductions += 2;\r\n\r\n      // 全数字或全字母扣分\r\n      //+前面的元素至少出现一次\r\n      if (/^\\d+$/.test(pass) || /^[A-Za-z]+$/.test(pass)) deductions += 2;\r\n\r\n      return Math.min(deductions, 8); // 最多扣8分\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.password-strength {\r\n  margin-top: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.strength-bar {\r\n  height: 8px;\r\n  border-radius: 4px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.strength-bar[class*=\"level-0\"] {\r\n  background: #ff4d4f;\r\n  width: 15%;\r\n}\r\n\r\n.strength-bar[class*=\"level-1\"] {\r\n  background: #ff7d45;\r\n  width: 30%;\r\n}\r\n\r\n.strength-bar[class*=\"level-2\"] {\r\n  background: #ffa940;\r\n  width: 50%;\r\n}\r\n\r\n.strength-bar[class*=\"level-3\"] {\r\n  background: #ffc53d;\r\n  width: 65%;\r\n}\r\n\r\n.strength-bar[class*=\"level-4\"] {\r\n  background: #73d13d;\r\n  width: 85%;\r\n}\r\n\r\n.strength-bar[class*=\"level-5\"] {\r\n  background: #389e0d;\r\n  width: 100%;\r\n}\r\n\r\n.strength-text {\r\n  margin-left: 8px;\r\n  font-size: 12px;\r\n  color: #666;\r\n  min-width: 50px;\r\n}\r\n</style>"],"mappings":"AAaA;EACAA,KAAA;EACAC,QAAA;IACAC,cAAA;MACA,UAAAC,QAAA;MAEA,IAAAC,KAAA;;MAEA;MACA,MAAAC,MAAA,QAAAF,QAAA,CAAAE,MAAA;MACAD,KAAA,IAAAE,IAAA,CAAAC,GAAA,CAAAD,IAAA,CAAAE,KAAA,CAAAH,MAAA;;MAEA;MACA,MAAAI,QAAA,WAAAC,IAAA,MAAAP,QAAA;MACA,MAAAQ,QAAA,WAAAD,IAAA,MAAAP,QAAA;MACA,MAAAS,SAAA,QAAAF,IAAA,MAAAP,QAAA;MACA,MAAAU,UAAA,iBAAAH,IAAA,MAAAP,QAAA;;MAEA;MACA,MAAAW,SAAA,IAAAL,QAAA,EAAAE,QAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAE,MAAA,CAAAC,OAAA,EAAAX,MAAA;MACAD,KAAA,IAAAU,SAAA;;MAEA;MACA,IAAAL,QAAA,IAAAE,QAAA,IAAAE,UAAA,EAAAT,KAAA;;MAEA;MACAA,KAAA,SAAAa,mBAAA;;MAEA;MACA;MACA;MACA,OAAAX,IAAA,CAAAC,GAAA,CAAAD,IAAA,CAAAY,GAAA,CAAAZ,IAAA,CAAAE,KAAA,CAAAJ,KAAA;IACA;IACAe,cAAA;MACA,MAAAC,MAAA;MACA,OAAAA,MAAA,MAAAlB,aAAA;IACA;IACAmB,aAAA;MACA,MAAAC,KAAA;MACA,OAAAA,KAAA,MAAApB,aAAA;IACA;EACA;EACAqB,OAAA;IACAN,oBAAA;MACA,IAAAO,UAAA;MACA,MAAAC,IAAA,QAAAtB,QAAA;;MAEA;MACA;MACA,SAAAuB,CAAA,MAAAA,CAAA,GAAAD,IAAA,CAAApB,MAAA,MAAAqB,CAAA;QACA,MAAAC,EAAA,GAAAF,IAAA,CAAAG,UAAA,CAAAF,CAAA;QACA,MAAAG,EAAA,GAAAJ,IAAA,CAAAG,UAAA,CAAAF,CAAA;QACA,MAAAI,EAAA,GAAAL,IAAA,CAAAG,UAAA,CAAAF,CAAA;QACA,MAAAK,EAAA,GAAAN,IAAA,CAAAG,UAAA,CAAAF,CAAA;;QAEA;QACA,IACAG,EAAA,KAAAF,EAAA,QAAAG,EAAA,KAAAD,EAAA,QAAAE,EAAA,KAAAD,EAAA,QACAD,EAAA,KAAAF,EAAA,QAAAG,EAAA,KAAAD,EAAA,QAAAE,EAAA,KAAAD,EAAA,MACA;UACAN,UAAA;QACA;MACA;;MAEA;MACA,gBAAAd,IAAA,CAAAe,IAAA,GAAAD,UAAA;;MAEA;MACA;MACA,YAAAd,IAAA,CAAAe,IAAA,mBAAAf,IAAA,CAAAe,IAAA,GAAAD,UAAA;MAEA,OAAAlB,IAAA,CAAAC,GAAA,CAAAiB,UAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}