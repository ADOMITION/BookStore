{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { formatDate } from '@/store/formatDate';\nexport default {\n  name: \"OrderPage\",\n  data() {\n    return {\n      orders: [],\n      loading: false\n    };\n  },\n  created() {\n    this.loadOrders();\n  },\n  methods: {\n    async loadOrders() {\n      this.loading = true;\n      try {\n        const {\n          data\n        } = await this.$axios.get(`${this.$httpUrl}/order/list`);\n        if (data.code === 200) {\n          /*this.orders = data.data\r\n              .map(order => {\r\n                // 辅助检查：如果后端未及时更新，前端强制修正状态\r\n                if (order.status === '已付款' && this.isOrderExpired(order.payTime)) {\r\n                  order.status = '已完成';\r\n                }\r\n                return order;\r\n              })*/\n          // 添加排序\n          this.orders = data.data.sort((a, b) => {\n            // 定义状态优先级\n            const statusOrder = {\n              '待付款': 1,\n              '已付款': 2,\n              '已完成': 3,\n              '已取消': 4\n            };\n            // 获取状态优先级\n            const aStatus = statusOrder[a.status] || 5;\n            const bStatus = statusOrder[b.status] || 5;\n            // 先按状态排序\n            if (aStatus !== bStatus) {\n              // 如果 a 的优先级比 b 高，则返回负数，表示 a 应该排在 b 前面\n              // 如果 a 的优先级比 b 低，则返回正数，表示 b 应该排在 a 前面\n              return aStatus - bStatus;\n            }\n            // 状态相同则按创建时间倒序\n            return new Date(b.createtime) - new Date(a.createtime);\n          });\n        }\n      } catch (error) {\n        this.$message.error('获取订单失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    /* isOrderExpired(payTime) {\r\n       if (!payTime) return false;\r\n       const payDate = new Date(payTime);\r\n       const deadline = new Date(payDate.getTime() + 3 * 86400000); // 精确到毫秒\r\n       return Date.now() > deadline;\r\n     },*/\n    statusTagType(status) {\n      const map = {\n        '待付款': 'warning',\n        '已付款': 'success',\n        '已完成': 'info',\n        '已取消': 'danger'\n      };\n      return map[status] || 'info';\n    },\n    formatTime(timeStr) {\n      //将后端返回的时间字符串转换为Date对象\n      const date = new Date(timeStr);\n      return formatDate(date, 'yyyy-MM-dd hh:mm');\n    },\n    viewDetail(orderId) {\n      this.$router.push(`/order/detail/${orderId}`);\n    }\n  }\n};","map":{"version":3,"names":["formatDate","name","data","orders","loading","created","loadOrders","methods","$axios","get","$httpUrl","code","sort","a","b","statusOrder","aStatus","status","bStatus","Date","createtime","error","$message","statusTagType","map","formatTime","timeStr","date","viewDetail","orderId","$router","push"],"sources":["src/user/OrderPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-container\">\r\n    <h3 class=\"page-title\">我的订单</h3>\r\n\r\n    <el-table\r\n        :data=\"orders\"\r\n        border\r\n        style=\"width: 90%; margin: 20px auto\"\r\n        v-loading=\"loading\"\r\n    >\r\n      <el-table-column prop=\"id\" label=\"订单号\" width=\"120\" align=\"center\"></el-table-column>\r\n\r\n      <el-table-column label=\"商品信息\" width=\"400\">\r\n        <template slot-scope=\"{row}\">\r\n          <div v-for=\"item in row.items\" :key=\"item.id\" class=\"goods-item\">\r\n            <el-image\r\n                :src=\"item.book.url || require('@/assets/default-book.png')\"\r\n                class=\"book-cover\"\r\n            ></el-image>\r\n            <div class=\"goods-info\">\r\n              <div class=\"book-name\">{{ item.book.name }}</div>\r\n              <div class=\"book-author\">{{ item.book.author }}</div>\r\n              <div class=\"quantity\">x{{ item.quantity }}</div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"总金额\" width=\"120\" align=\"center\">\r\n        <template slot-scope=\"{row}\">\r\n          ￥{{ row.totalAmount.toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"订单状态\" width=\"120\" align=\"center\">\r\n        <template slot-scope=\"{row}\">\r\n          <el-tag :type=\"statusTagType(row.status)\">\r\n            {{ row.status }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"下单时间\" width=\"180\" align=\"center\">\r\n        <template slot-scope=\"{row}\">\r\n          {{ formatTime(row.createtime) }}\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"操作\" align=\"center\">\r\n        <template slot-scope=\"{row}\">\r\n          <el-button\r\n              type=\"info\"\r\n              size=\"mini\"\r\n              @click=\"viewDetail(row.id)\"\r\n          >\r\n            详情\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { formatDate } from '@/store/formatDate';\r\n\r\nexport default {\r\n  name: \"OrderPage\",\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      loading: false\r\n    }\r\n  },\r\n  created() {\r\n    this.loadOrders();\r\n  },\r\n  methods: {\r\n    async loadOrders() {\r\n      this.loading = true;\r\n      try {\r\n        const { data } = await this.$axios.get(`${this.$httpUrl}/order/list`);\r\n        if(data.code === 200) {\r\n          /*this.orders = data.data\r\n              .map(order => {\r\n                // 辅助检查：如果后端未及时更新，前端强制修正状态\r\n                if (order.status === '已付款' && this.isOrderExpired(order.payTime)) {\r\n                  order.status = '已完成';\r\n                }\r\n                return order;\r\n              })*/\r\n          // 添加排序\r\n          this.orders = data.data.sort((a, b) => {\r\n            // 定义状态优先级\r\n            const statusOrder = {\r\n              '待付款': 1,\r\n              '已付款': 2,\r\n              '已完成': 3,\r\n              '已取消': 4\r\n            };\r\n            // 获取状态优先级\r\n            const aStatus = statusOrder[a.status] || 5;\r\n            const bStatus = statusOrder[b.status] || 5;\r\n            // 先按状态排序\r\n            if(aStatus !== bStatus) {\r\n              // 如果 a 的优先级比 b 高，则返回负数，表示 a 应该排在 b 前面\r\n              // 如果 a 的优先级比 b 低，则返回正数，表示 b 应该排在 a 前面\r\n              return aStatus - bStatus;\r\n            }\r\n            // 状态相同则按创建时间倒序\r\n            return new Date(b.createtime) - new Date(a.createtime);\r\n          });\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('获取订单失败');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n   /* isOrderExpired(payTime) {\r\n      if (!payTime) return false;\r\n      const payDate = new Date(payTime);\r\n      const deadline = new Date(payDate.getTime() + 3 * 86400000); // 精确到毫秒\r\n      return Date.now() > deadline;\r\n    },*/\r\n    statusTagType(status) {\r\n      const map = {\r\n        '待付款': 'warning',\r\n        '已付款': 'success',\r\n        '已完成': 'info',\r\n        '已取消': 'danger'\r\n      }\r\n      return map[status] || 'info';\r\n    },\r\n    formatTime(timeStr) {\r\n      //将后端返回的时间字符串转换为Date对象\r\n      const date = new Date(timeStr);\r\n      return formatDate(date, 'yyyy-MM-dd hh:mm');\r\n    },\r\n    viewDetail(orderId) {\r\n      this.$router.push(`/order/detail/${orderId}`);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.page-title {\r\n  text-align: center;\r\n  margin: 20px 0;\r\n  color: #333;\r\n}\r\n\r\n.goods-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.book-cover {\r\n  width: 60px;\r\n  height: 80px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.goods-info {\r\n  flex: 1;\r\n}\r\n\r\n.book-name {\r\n  font-weight: 500;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.book-author {\r\n  color: #666;\r\n  font-size: 12px;\r\n}\r\n\r\n.quantity {\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n</style>"],"mappings":";AAgEA,SAAAA,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA,MAAAD,WAAA;MACA,KAAAF,OAAA;MACA;QACA;UAAAF;QAAA,eAAAM,MAAA,CAAAC,GAAA,SAAAC,QAAA;QACA,IAAAR,IAAA,CAAAS,IAAA;UACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;UACA;UACA,KAAAR,MAAA,GAAAD,IAAA,CAAAA,IAAA,CAAAU,IAAA,EAAAC,CAAA,EAAAC,CAAA;YACA;YACA,MAAAC,WAAA;cACA;cACA;cACA;cACA;YACA;YACA;YACA,MAAAC,OAAA,GAAAD,WAAA,CAAAF,CAAA,CAAAI,MAAA;YACA,MAAAC,OAAA,GAAAH,WAAA,CAAAD,CAAA,CAAAG,MAAA;YACA;YACA,IAAAD,OAAA,KAAAE,OAAA;cACA;cACA;cACA,OAAAF,OAAA,GAAAE,OAAA;YACA;YACA;YACA,WAAAC,IAAA,CAAAL,CAAA,CAAAM,UAAA,QAAAD,IAAA,CAAAN,CAAA,CAAAO,UAAA;UACA;QACA;MACA,SAAAC,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;QACA,KAAAjB,OAAA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACAmB,cAAAN,MAAA;MACA,MAAAO,GAAA;QACA;QACA;QACA;QACA;MACA;MACA,OAAAA,GAAA,CAAAP,MAAA;IACA;IACAQ,WAAAC,OAAA;MACA;MACA,MAAAC,IAAA,OAAAR,IAAA,CAAAO,OAAA;MACA,OAAA1B,UAAA,CAAA2B,IAAA;IACA;IACAC,WAAAC,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA,kBAAAF,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}