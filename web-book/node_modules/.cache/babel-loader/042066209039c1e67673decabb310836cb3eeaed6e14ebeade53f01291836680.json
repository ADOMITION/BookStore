{"ast":null,"code":"export default {\n  name: \"UserCenter\",\n  data() {\n    let checkDuplicate = (rule, value, callback) => {\n      if (this.userInfo.id) {\n        return callback();\n      }\n      this.$axios.get(this.$httpUrl + \"/user/findByNo?no=\" + this.userInfo.no).then(res => res.data).then(res => {\n        if (res.code !== 200) {\n          callback();\n        } else {\n          callback(new Error('用户名已经存在'));\n        }\n      });\n    };\n    return {\n      userInfo: {\n        id: '',\n        no: '',\n        name: '',\n        password: '',\n        email: '',\n        phone: '',\n        company: ''\n      },\n      rules: {\n        no: [{\n          required: true,\n          message: '请更新您的用户名',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 8,\n          message: '长度在 3 到 8 个字符',\n          trigger: 'blur'\n        }, {\n          validator: checkDuplicate,\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '请更新您的名字',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请更新您的密码',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 8,\n          message: '长度在 3 到 8 个字符',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '请请更新您的电子邮件',\n          trigger: 'blur'\n        }],\n        phone: [{\n          required: true,\n          message: \"手机号不能为空，请更新您的手机号\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^1[3|4|5|6|7|8|9][0-9]\\d{8}$/,\n          message: \"请输入正确的手机号码\",\n          trigger: \"blur\"\n        }],\n        company: [{\n          required: true,\n          message: '请更新您的收货地址',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    this.loadUserProfile();\n  },\n  methods: {\n    async loadUserProfile() {\n      try {\n        this.loading = true;\n        // 从本地存储获取用户ID\n        const userId = JSON.parse(sessionStorage.getItem('CurUser')).id;\n        const res = await this.$axios.get(this.$httpUrl + '/user/profile', {\n          params: {\n            id: userId\n          }\n        });\n        if (res.data.code === 200) {\n          this.userInfo = res.data.data;\n        }\n      } catch (error) {\n        this.$message.error('获取用户信息失败');\n      }\n    },\n    async saveInfo() {\n      try {\n        await this.$refs.userInfoForm.validate();\n        // 构造更新数据\n        const updateData = {\n          ...this.userInfo,\n          // 如果密码为空则保留原密码\n          password: this.userInfo.password || undefined\n        };\n        const res = await this.$axios.post(this.$httpUrl + '/user/uupdate', updateData);\n        if (res.data.code === 200) {\n          this.$message.success('信息更新成功');\n          // 更新本地存储\n          const storedUser = JSON.parse(sessionStorage.getItem('CurUser'));\n          sessionStorage.setItem('CurUser', JSON.stringify({\n            ...storedUser,\n            ...updateData,\n            password: '' // 清除本地存储在浏览器的密码\n          }));\n        }\n      } catch (error) {\n        this.$message.error(error.response?.data?.msg || '更新失败');\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","checkDuplicate","rule","value","callback","userInfo","id","$axios","get","$httpUrl","no","then","res","code","Error","password","email","phone","company","rules","required","message","trigger","min","max","validator","pattern","created","loadUserProfile","methods","loading","userId","JSON","parse","sessionStorage","getItem","params","error","$message","saveInfo","$refs","userInfoForm","validate","updateData","undefined","post","success","storedUser","setItem","stringify","response","msg"],"sources":["src/user/UserCenter.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-center-container\">\r\n    <!-- 头部区域 -->\r\n    <div class=\"header-banner\">\r\n      <img src=\"@/assets/bookstore-logo.png\" class=\"store-logo\" alt=\"书店logo\">\r\n      <h1 class=\"welcome-text\">欢迎回来，{{ userInfo.name || '书友' }}！</h1>\r\n    </div>\r\n\r\n    <!-- 主体内容 -->\r\n    <div class=\"main-content\">\r\n      <!-- 左侧个人信息 -->\r\n      <div class=\"profile-section\">\r\n        <el-card class=\"profile-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span class=\"card-title\">📖 我的账户</span>\r\n          </div>\r\n\r\n          <!-- 用户头像 -->\r\n          <div class=\"avatar-section\">\r\n            <el-avatar :size=\"100\" :src=\"userInfo.avatar || require('@/assets/default-avatar.png')\"></el-avatar>\r\n            <el-button type=\"text\" class=\"upload-btn\" @click=\"showUploadDialog\">更换头像</el-button>\r\n          </div>\r\n\r\n          <!-- 会员信息 -->\r\n          <div class=\"membership-info\">\r\n            <div class=\"info-item\">\r\n              <span class=\"label\">会员等级：</span>\r\n              <el-tag type=\"warning\">黄金会员</el-tag>\r\n            </div>\r\n            <div class=\"info-item\">\r\n              <span class=\"label\">阅读积分：</span>\r\n              <span class=\"value\">1580 分</span>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n\r\n        <!-- 最近订单 -->\r\n        <el-card class=\"order-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span class=\"card-title\">📦 最近订单</span>\r\n            <el-button type=\"text\" @click=\"$router.push('/orders')\">查看全部</el-button>\r\n          </div>\r\n          <div class=\"order-list\">\r\n            <div v-for=\"(order, index) in recentOrders\" :key=\"index\" class=\"order-item\">\r\n              <div class=\"order-info\">\r\n                <span class=\"order-title\">{{ order.title }}</span>\r\n                <span class=\"order-date\">{{ order.date }}</span>\r\n              </div>\r\n              <el-tag :type=\"order.status === '已完成' ? 'success' : 'info'\">\r\n                {{ order.status }}\r\n              </el-tag>\r\n            </div>\r\n            <div v-if=\"recentOrders.length === 0\" class=\"empty-orders\">\r\n              暂无最近订单\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n\r\n      <!-- 右侧表单 -->\r\n      <div class=\"form-section\">\r\n        <el-card class=\"form-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span class=\"card-title\">✏️ 编辑资料</span>\r\n          </div>\r\n          <el-form\r\n              :model=\"userInfo\"\r\n              ref=\"userInfoForm\"\r\n              :rules=\"rules\"\r\n              label-width=\"100px\"\r\n              class=\"user-form\"\r\n          >\r\n            <el-form-item label=\"用户名\" prop=\"no\">\r\n              <el-input v-model=\"userInfo.no\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"名字\" prop=\"name\">\r\n              <el-input v-model=\"userInfo.name\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"密码\" prop=\"password\">\r\n              <el-input v-model=\"userInfo.password\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"电子邮件\" prop=\"email\">\r\n              <el-input v-model=\"userInfo.email\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"联系方式\" prop=\"phone\">\r\n              <el-input v-model=\"userInfo.phone\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"收货地址\" prop=\"company\">\r\n              <el-input v-model=\"userInfo.company\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button type=\"primary\" @click=\"saveInfo\">保存信息</el-button>\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button\r\n                  type=\"primary\"\r\n                  @click=\"saveInfo\"\r\n                  class=\"save-btn\"\r\n                  :loading=\"saving\"\r\n              >\r\n                <i class=\"el-icon-check\"></i> 保存修改\r\n              </el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"UserCenter\",\r\n  data() {\r\n    let checkDuplicate =(rule,value,callback)=>{\r\n      if(this.userInfo.id){\r\n        return callback();\r\n      }\r\n      this.$axios.get(this.$httpUrl+\"/user/findByNo?no=\"+this.userInfo.no).then(res=>res.data).then(res=>{\r\n        if(res.code!==200){\r\n          callback()\r\n        }else{\r\n          callback(new Error('用户名已经存在'));\r\n        }\r\n      })\r\n    };\r\n    return {\r\n      userInfo: {\r\n        id:'',\r\n        no:'',\r\n        name:'',\r\n        password:'',\r\n        email:'',\r\n        phone:'',\r\n        company:''\r\n      },\r\n\r\n      rules: {\r\n        no: [\r\n          {required: true, message: '请更新您的用户名', trigger: 'blur'},\r\n          {min: 3, max: 8, message: '长度在 3 到 8 个字符', trigger: 'blur'},\r\n          {validator:checkDuplicate,trigger: 'blur'}\r\n        ],\r\n        name: [\r\n          {required: true, message: '请更新您的名字', trigger: 'blur'}\r\n        ],\r\n        password: [\r\n          {required: true, message: '请更新您的密码', trigger: 'blur'},\r\n          {min: 3, max: 8, message: '长度在 3 到 8 个字符', trigger: 'blur'}\r\n        ],\r\n        email: [\r\n          {required: true, message: '请请更新您的电子邮件', trigger: 'blur'}\r\n        ],\r\n        phone: [\r\n          {required: true,message: \"手机号不能为空，请更新您的手机号\",trigger: \"blur\"},\r\n          {pattern: /^1[3|4|5|6|7|8|9][0-9]\\d{8}$/, message: \"请输入正确的手机号码\", trigger: \"blur\"}\r\n        ],\r\n        company: [\r\n          {required: true, message: '请更新您的收货地址', trigger: 'blur'}\r\n        ],\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.loadUserProfile();\r\n  },\r\n  methods: {\r\n    async loadUserProfile() {\r\n      try {\r\n        this.loading = true;\r\n        // 从本地存储获取用户ID\r\n        const userId = JSON.parse(sessionStorage.getItem('CurUser')).id;\r\n        const res = await this.$axios.get(this.$httpUrl+'/user/profile', {\r\n          params: {\r\n            id: userId\r\n          }\r\n        });\r\n        if (res.data.code === 200) {\r\n          this.userInfo = res.data.data;\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('获取用户信息失败');\r\n      }\r\n    },\r\n\r\n    async saveInfo() {\r\n      try {\r\n        await this.$refs.userInfoForm.validate();\r\n        // 构造更新数据\r\n        const updateData = {\r\n          ...this.userInfo,\r\n          // 如果密码为空则保留原密码\r\n          password: this.userInfo.password || undefined\r\n        };\r\n        const res = await this.$axios.post(this.$httpUrl+'/user/uupdate', updateData);\r\n        if (res.data.code === 200) {\r\n          this.$message.success('信息更新成功');\r\n          // 更新本地存储\r\n          const storedUser = JSON.parse(sessionStorage.getItem('CurUser'));\r\n          sessionStorage.setItem('CurUser', JSON.stringify({\r\n            ...storedUser,\r\n            ...updateData,\r\n            password: '' // 清除本地存储在浏览器的密码\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        this.$message.error(error.response?.data?.msg || '更新失败');\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AA2GA;EACAA,IAAA;EACAC,KAAA;IACA,IAAAC,cAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,SAAAC,QAAA,CAAAC,EAAA;QACA,OAAAF,QAAA;MACA;MACA,KAAAG,MAAA,CAAAC,GAAA,MAAAC,QAAA,+BAAAJ,QAAA,CAAAK,EAAA,EAAAC,IAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAZ,IAAA,EAAAW,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACAT,QAAA;QACA;UACAA,QAAA,KAAAU,KAAA;QACA;MACA;IACA;IACA;MACAT,QAAA;QACAC,EAAA;QACAI,EAAA;QACAX,IAAA;QACAgB,QAAA;QACAC,KAAA;QACAC,KAAA;QACAC,OAAA;MACA;MAEAC,KAAA;QACAT,EAAA,GACA;UAAAU,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,SAAA,EAAAxB,cAAA;UAAAqB,OAAA;QAAA,EACA;QACAvB,IAAA,GACA;UAAAqB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAP,QAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,KAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,KAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAI,OAAA;UAAAL,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,OAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAK,QAAA;IACA,KAAAC,eAAA;EACA;EACAC,OAAA;IACA,MAAAD,gBAAA;MACA;QACA,KAAAE,OAAA;QACA;QACA,MAAAC,MAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,cAAA,CAAAC,OAAA,aAAA7B,EAAA;QACA,MAAAM,GAAA,cAAAL,MAAA,CAAAC,GAAA,MAAAC,QAAA;UACA2B,MAAA;YACA9B,EAAA,EAAAyB;UACA;QACA;QACA,IAAAnB,GAAA,CAAAZ,IAAA,CAAAa,IAAA;UACA,KAAAR,QAAA,GAAAO,GAAA,CAAAZ,IAAA,CAAAA,IAAA;QACA;MACA,SAAAqC,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IAEA,MAAAE,SAAA;MACA;QACA,WAAAC,KAAA,CAAAC,YAAA,CAAAC,QAAA;QACA;QACA,MAAAC,UAAA;UACA,QAAAtC,QAAA;UACA;UACAU,QAAA,OAAAV,QAAA,CAAAU,QAAA,IAAA6B;QACA;QACA,MAAAhC,GAAA,cAAAL,MAAA,CAAAsC,IAAA,MAAApC,QAAA,oBAAAkC,UAAA;QACA,IAAA/B,GAAA,CAAAZ,IAAA,CAAAa,IAAA;UACA,KAAAyB,QAAA,CAAAQ,OAAA;UACA;UACA,MAAAC,UAAA,GAAAf,IAAA,CAAAC,KAAA,CAAAC,cAAA,CAAAC,OAAA;UACAD,cAAA,CAAAc,OAAA,YAAAhB,IAAA,CAAAiB,SAAA;YACA,GAAAF,UAAA;YACA,GAAAJ,UAAA;YACA5B,QAAA;UACA;QACA;MACA,SAAAsB,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA,CAAAA,KAAA,CAAAa,QAAA,EAAAlD,IAAA,EAAAmD,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}